// 30 seg faults cause of stack limit?
#define ROW 20
#define COL 20

let board[ROW * COL * 2] = [0]
let random = mem + 32

let i = 0
while i < (ROW * COL * 2) do
    syscall(318, random, 8, 0)
    if (*random) % 2 == 1 then
        board[i] = 1
    else
        board[i] = 0
    end
    i = i + 1
end

let timespec = mem
*timespec = 0
*(timespec + 8) = 100000000
let rem = mem + 16
*rem = 0

let elements = ROW * COL
let iter = 0
print("\033[H\033[2J")
while 1 do
    let curr = iter % 2
    let i = 0
    syscall(35, timespec, rem)
    while i < ROW do
        let j = 0
        while j < COL do
            let index = curr*elements + ROW * i + j
            if board[index] == 1 then
                print("#")
            else
                print(" ")
            end

            let neighbors = 0
            let di = -1
            while di <= 1 do
                let dj = -1
                while dj <= 1 do
                    let neighbor_i = i + di
                    let neighbor_j = j + dj
                    let neighbor_index = curr*elements + ROW * neighbor_i + neighbor_j
                    if (di == 0) & (dj == 0) then
                    else if (neighbor_i >= 0) & (neighbor_i < ROW) & (neighbor_j >= 0) & (neighbor_j < COL) & (board[neighbor_index] == 1) then
                        neighbors = neighbors + 1 
                    end
                    dj = dj + 1
                end
                di = di + 1
            end

            let other = 1
            if curr == 1 then other = 0 end
            if (neighbors < 2) | (neighbors > 3) then
                board[other*elements + ROW * i + j] = 0
            else if (board[index] == 0) & (neighbors == 3) then
                board[other*elements + ROW * i + j] = 1
            else
                board[other*elements + ROW * i + j] = board[index]
            end

            j = j + 1
        end
        print("\n")

        i = i + 1
    end
    print("\033[H")
    iter = (iter + 1) % 2
end
